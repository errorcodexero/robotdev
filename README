This is the new make file build structure for robot development.

This structure ...

- depends only on gnu make and bash beyond the FIRST tools.  It
  should work on a variety of platforms and should be easy to
  bring up on new platforms.

- is cross platform.  It runs on cygwin on windows, linux, and
  mac os.  (I have not tried it on mac os but it should run
  there.)

- runs the existing test code for the existing robot, including
  running with valgrind when running on linux

- adds the ability to have a robot directory named common
  to share code common to multiple robots

- expects the FRC compilers to be installed on linux and mac os
  but uses a copy in the repository for cygwin

- stores the necessary external software (CTRE,  NavX, WPIlib)
  required to build the robot software as part of the repository
  so it is easy to get builds up and running.  No more searching
  for just the right version of some external software.
  

The layout of this repository is

robotdev
- makefiles			makefiles used to build robot code
- external
  - CTRE_FRCLibs		CTRE libraries for 2018
  - CTRE_FRCLibs2017		CTRE libraries from 2017
  - frc				FRC compiler from 2018
  - frc2017			FRC compiler from 2017
  - navx			NavX libraries for 2018
  - navx2017			NavX libraries for 2017
  - wpilib			First WPILibs for 2018
  - wpilib2017			First WPILibs for 2017
- robots			repository for all robot code
  - common			code common to multiple robots
    - helpers			common code for theremin/claymore
    - xerolib			common code for playing with new arch
  - gopigo3
    - gopigo3hw			hardware library for the gopigo3 robot
    - gopigo3frc		frc compatilbe robot lib for the gopigo3 robot
    - gopigo3navx		navx code for the gopigo3 robot
  - theremin			code specific to the software robot
  - claymore			code for the 2018 power up
  - play			code playing with a new robot sw
    				architecture
  - sabre			code for the 2016 stronghold robot

---------------------------------------------------------------
At the top level of a robot (e.g. robots/theremin)

make CONFIG=cfg
- builds the robot code, same as the robotsw target

make CONFIG=cfg tests
- builds and runs the test code locally

make CONFIG=cfg robotsw
- builds the robot software

make CONFIG=cfg deploy
- build the robot software and deploys to the robot
  the team is assumed to be 1425, but can be overridden with
  the TEAM environment varaible

---------------------------------------------------------------
Within a subdirectory of a robot,

make CONFIG=cfg
- build the robot code, either the library or the application

make CONFIG=cfg tests
- builds and runs the test code locally

make CONFIG=cfg deploy
- deploys the robot code to the robot (only works for apps)
  the team is assumed to be 1425, but can be overridden with
  the TEAM environment varaible

--------------------------------------------------------------1

Notes:
For all make targets, the CONFIG option must be specified.  The
config option can be 'debug' or 'release' with no quotes.

By default a short message indicating build steps is displayed. If
VERBOSE=1 is set on the make invocation then the full build command
line is displayed.  (e.g. make CONFIG=debug VERBOSE=1)

